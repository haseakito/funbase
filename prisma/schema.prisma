// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account Model for OAuth Provider
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Database session
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// User Model
model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  bio            String?
  hashedPassword String?
  posts          Post[]
  likes          Like[]
  StripeAccount  StripeAccount?
  purchases      Purchase[]
  followers      Follows[]      @relation("follower")
  following      Follows[]      @relation("following")
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model StripeAccount {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeAccountId String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Follow model
model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@id([followerId, followingId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Post model
model Post {
  id          String              @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  muxData     MuxData?
  categories  CategoriesOnPosts[]
  purchase    Purchase[]
  likes       Like[]
  price       Float?
  published   Boolean             @default(false)
  userId      String
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

// Category model
model Category {
  id    String              @id @default(cuid())
  name  String              @unique
  posts CategoriesOnPosts[]
}

// Categories to Posts model
model CategoriesOnPosts {
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  @@id([postId, categoryId])
}

// Like model
model Like {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId])
}

// Mux data model
model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?
  postId     String  @unique
  post       Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

// Purchase model
model Purchase {
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, postId])
}
